[package]
edition.workspace = true
name = "account-wasm"
version.workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
account_sdk.workspace = true
async-trait.workspace = true
base64 = "0.22.0"
cainome.workspace = true
convert_case = "0.6.0"
coset = { version = "0.3.4", features = ["std"] }
hex = "0.4.3"
num-traits.workspace = true
p256 = "0.13"
reqwest = { version = "0.11.16", default-features = false, features = ["rustls-tls"] }
starknet.workspace = true
serde = "1.0.197"
serde-wasm-bindgen = "0.6.5"
serde_json = "1.0.114"
serde_with = "2.3"
thiserror.workspace = true
url = "2.3.1"
wasm-bindgen = "0.2.84"
wasm-bindgen-futures = "0.4.37"
wasm-webauthn = "0.1.0"
web-sys = { version = "0.3.4", features = ['Window', 'console'] }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.7", optional = true }

# Compiler optimization when running test to prevent ‘locals exceed maximum’ error,
# where a function is using more that the maximum allowed local variables.
[profile.dev]
incremental = true
opt-level = 1

[dev-dependencies]
wasm-bindgen-test = "0.3.34"

[features]
console-error-panic = ["dep:console_error_panic_hook"]
