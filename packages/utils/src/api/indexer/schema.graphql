type Query {
  events(keys: [String!]!, limit: Int!, offset: Int!): [Event!]
  tokenBalances(
    accountAddress: String!
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
  ): Token__BalanceConnection
  tokenTransfers(
    accountAddress: String!
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
  ): Token__TransferConnection
}

scalar Cursor

type World__PageInfo {
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
}

type PageInfo {
  hasNextPage: Boolean!
}

type Event {
  edges: [EventEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type EventEdge {
  node: EventNode!
}

type EventNode {
  id: String!
  keys: [String!]!
  data: [String!]!
  transactionHash: String!
  executedAt: String!
  createdAt: String!
}

type Token__BalanceConnection {
  edges: [Token__BalanceEdge!]!
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type Token__BalanceEdge {
  cursor: Cursor!
  node: Token__Balance!
}

type Token__Balance {
  tokenMetadata: ERC__Token!
}

union ERC__Token = ERC20__Token | ERC721__Token

type ERC20__Token {
  amount: String!
  contractAddress: String!
  decimals: String!
  name: String!
  symbol: String!
}

type ERC721__Token {
  contractAddress: String!
  imagePath: String!
  metadata: String!
  metadataAttributes: String!
  metadataDescription: String!
  metadataName: String!
  name: String!
  symbol: String!
  tokenId: String!
}

type Token__TransferConnection {
  edges: [Token__TransferEdge!]!
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type Token__TransferEdge {
  cursor: Cursor!
  node: Token__Transfer!
}

type Token__Transfer {
  executedAt: String!
  from: String!
  to: String!
  tokenMetadata: ERC__Token!
  transactionHash: String!
}
