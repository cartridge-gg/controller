scalar Hash # 0x...
scalar Cursor
scalar Date # MM/DD/YYYY
scalar DateTime
scalar Ticker # e.g. "USDC"
scalar Url
type PageInfo {
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
}

type CartridgeAPIQuery {
  profile(username: String!, slot: String, countervalue: Ticker): Profile

  # other query fields ...
}

type Profile {
  inventory: Inventory!
  activities: Activities!
}

type Inventory {
  # Return ETH and STRK if slot arg is empty
  balances(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
  ): BalanceConnection!

  collections(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
  ): CollectionConnection!

  collection(contractAddress: Hash!): Collection

  asset(contractAddress: Hash!, tokenId: String!): Asset
}

type BalanceConnection {
  edges: [BalanceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BalanceEdge {
  cursor: Cursor!
  node: Balance!
}

type Balance {
  balance: ERC20Amount!
  countervalue: ERC20AmountCountervalue # Only when countervalue arg is provided
}

type ERC20Metadata {
  contractAddress: Hash!
  name: String!
  symbol: Ticker!
  decimals: String!
  imageUrl: Url!
}

type CollectionConnection {
  edges: [CollectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CollectionEdge {
  cursor: Cursor!
  node: Collection!
}

type Collection {
  assets: AssetConnection!
  meta: ERC721Metadata!
}

type AssetConnection {
  edges: [AssetEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AssetEdge {
  cursor: Cursor!
  node: Asset!
}

type Asset {
  tokenId: String!
  name: String!
  description: String
  imageUrl: Url!
  attributes: String
}

type ERC721Metadata {
  contractAddress: Hash!
  name: String!
  assetCount: Int!
  imageUrl: Url!
  #   bannerImageUrl: Url!
}

type Activities {
  pending: [Activity!]!
  completed: ActivityConnection!
}

type ActivityConnection {
  edges: [ActivityByDateEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ActivityByDateEdge {
  cursor: Cursor!
  node: ActivityByDate!
}

type ActivityByDate {
  activities: [Activity!]!
  executedOn: Date!
}

union Activity = ERC20Transfer
# | ERC721Transfer
# | SystemCall

type ERC20Transfer {
  amount: ERC20Amount!
  countervalue: ERC20AmountCountervalue
  form: Hash!
  to: Hash!
  transactionHash: Hash!
  executedAt: DateTime!
  error: String
}

type ERC20Amount {
  value: String!
  meta: ERC20Metadata!
}

type ERC20AmountCountervalue {
  value: String!
  meta: ERC20Metadata!
}

# type ERC721Transfer {}

# type SystemCall {}
