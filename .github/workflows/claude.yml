name: claude

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"

          # Optional: Trigger when specific user is assigned to an issue
          assignee_trigger: "claude-bot"

          # Add MCP GitHub tools for inline comments and TypeScript/React testing
          allowed_tools: "mcp__github__create_pending_pull_request_review,mcp__github__add_pull_request_review_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,mcp__github__get_pull_request_diff,Bash(pnpm install),Bash(pnpm run build),Bash(pnpm run test:*),Bash(pnpm run lint:*),Bash(pnpm run format),Bash(pnpm run dev),Bash(pnpm run storybook),Bash(pnpm run e2e:*),Bash(pnpm --filter *),Bash(pnpm run clean),Bash(corepack enable pnpm)"

          # Custom instructions for Claude to provide comprehensive TypeScript/React reviews
          direct_prompt: |
            Please review this TypeScript/React gaming wallet PR and provide inline feedback using the GitHub review system. Follow these steps:

            1. **Start a review**: Use `mcp__github__create_pending_pull_request_review` to begin a pending review
            2. **Get diff information**: Use `mcp__github__get_pull_request_diff` to understand the code changes and line numbers
            3. **Add inline comments**: Use `mcp__github__add_pull_request_review_comment_to_pending_review` for each specific piece of feedback on particular lines, including code change suggestions where appropriate
            4. **Submit the review**: Use `mcp__github__submit_pending_pull_request_review` with event type "COMMENT" (not "REQUEST_CHANGES") to publish all comments as a non-blocking review

            Focus your review on:
            
            **TypeScript/React Code Quality:**
            - Type safety and proper TypeScript usage
            - React hooks usage and lifecycle management
            - Component composition and reusability
            - Props interface design and validation
            - State management patterns
            
            **Wallet & Blockchain Integration:**
            - StarkNet integration best practices
            - Account abstraction implementation
            - Session token management
            - WebAuthn/Passkeys security patterns
            - Iframe communication security
            
            **UI/UX & Accessibility:**
            - Component API consistency
            - Storybook story completeness
            - TailwindCSS usage patterns
            - Responsive design considerations
            - Accessibility best practices
            
            **Testing & Quality:**
            - Jest unit test coverage and quality
            - Storybook visual regression tests
            - Playwright E2E test completeness
            - Mock usage and test isolation
            - Error boundary implementation
            
            **Monorepo & Build:**
            - Package interdependencies
            - Turbo build configuration
            - Workspace protocol usage
            - Bundle size considerations
            - Performance optimizations
            
            **Security:**
            - Input validation and sanitization
            - XSS prevention
            - Secure iframe communication
            - Sensitive data handling
            - Authentication flow security

            Provide specific, actionable feedback with inline comments for line-specific issues and include an overall summary when submitting the review. **Important**: Submit as "COMMENT" type so the review doesn't block the PR.

          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test
