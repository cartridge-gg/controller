name: release-dispatch
on:
  workflow_dispatch:
    inputs:
      version:
        description: Version to release
        required: true
        type: string
      tag:
        description: Release tag
        required: true
        default: latest
        type: choice
        options:
          - latest
          - prerelease

jobs:
  propose-release:
    permissions:
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure Git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org/"

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Update Workspace Packages Version
        run: |
          VERSION=${{ github.event.inputs.version }}
          pnpm -r exec -- bash -c "npm version $VERSION --no-git-tag-version"
      - name: Create Release Pull Request
        if: ${{ github.event.inputs.tag == 'latest' }}
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.CREATE_PR_TOKEN }}
          title: "Prepare release: ${{ github.event.inputs.version }}"
          commit-message: "Prepare release: ${{ github.event.inputs.version }}"
          branch: "prepare-release"
          base: main
          delete-branch: true

      - name: Prepare Prerelease Pull Request
        if: ${{ github.event.inputs.tag == 'prerelease' }}
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.CREATE_PR_TOKEN }}
          title: "Prepare prerelease: ${{ github.event.inputs.version }}"
          commit-message:
            "Prepare prerelease: ${{ github.event.inputs.version }}"
          branch: "prepare-prerelease"
          base: main
          delete-branch: true

      - name: Create Draft Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          body: |
            ## Release v${{ github.event.inputs.version }}

            Release notes will be generated automatically when the release PR is merged.
          draft: true
          prerelease: ${{ github.event.inputs.tag == 'prerelease' }}
