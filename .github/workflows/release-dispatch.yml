name: release-dispatch
on:
  workflow_dispatch:
    inputs:
      version:
        description: Version to release
        required: true
        type: string
      tag:
        description: Release tag
        required: true
        default: latest
        type: choice
        options:
          - latest
          - prerelease

jobs:
  propose-release:
    permissions:
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure Git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org/"

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Update Workspace Packages Version
        run: |
          VERSION=${{ github.event.inputs.version }}
          pnpm -r exec -- bash -c "npm version $VERSION --no-git-tag-version"
      - name: Create Release Pull Request
        if: ${{ github.event.inputs.tag == 'latest' }}
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.CREATE_PR_TOKEN }}
          title: "Prepare release: ${{ github.event.inputs.version }}"
          commit-message: "Prepare release: ${{ github.event.inputs.version }}"
          branch: "prepare-release"
          base: main
          delete-branch: true

      - name: Prepare Prerelease Pull Request
        if: ${{ github.event.inputs.tag == 'prerelease' }}
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.CREATE_PR_TOKEN }}
          title: "Prepare prerelease: ${{ github.event.inputs.version }}"
          commit-message:
            "Prepare prerelease: ${{ github.event.inputs.version }}"
          branch: "prepare-prerelease"
          base: main
          delete-branch: true

      - name: Get latest release tag
        id: latest_release
        run: |
          LATEST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "")
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get commit range for release notes
        id: commit_range
        run: |
          PREVIOUS_TAG="${{ steps.latest_release.outputs.LATEST_TAG }}"
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git log --oneline -n 50 | tail -1 | cut -d' ' -f1)
          fi
          echo "RANGE=${PREVIOUS_TAG}..HEAD" >> $GITHUB_OUTPUT

      - name: Generate Release Notes with Claude
        id: release_notes
        uses: anthropics/claude-code-action@beta
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_instructions: |
            Generate professional release notes for version ${{ github.event.inputs.version }} of the Cartridge Controller SDK.

            This is a monorepo containing:
            - @cartridge/controller - Main SDK implementing Starknet account interfaces  
            - @cartridge/connector - Lightweight connector interface for Starknet React applications

            Analyze the git commit range: ${{ steps.commit_range.outputs.RANGE }}

            Create release notes in this format:

            ## What's New
            [Key features and improvements - focus on user-facing changes]

            ## Changes
            ### @cartridge/controller
            - [List changes to controller package]

            ### @cartridge/connector
            - [List changes to connector package]

            ## Bug Fixes
            - [List bug fixes]

            ## Breaking Changes
            ⚠️ [List any breaking changes with migration guidance]

            ## Installation
            ```bash
            npm install @cartridge/controller@${{ github.event.inputs.version }}
            npm install @cartridge/connector@${{ github.event.inputs.version }}
            ```

            Focus on user-facing changes and be professional. Save the result to release-notes.md and output the content.

      - name: Read generated release notes
        id: get_notes
        run: |
          if [ -f "release-notes.md" ]; then
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
            cat release-notes.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_NOTES=## Release v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Draft Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          body: ${{ steps.get_notes.outputs.RELEASE_NOTES }}
          draft: true
          prerelease: ${{ github.event.inputs.tag == 'prerelease' }}
