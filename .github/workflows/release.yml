name: release

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  publish:
    if:
      (github.event.pull_request.merged == true &&
      (github.event.pull_request.head.ref == 'prepare-release' ||
      github.event.pull_request.head.ref == 'prepare-prerelease')) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org/"

      - uses: pnpm/action-setup@v4
      - run: pnpm install

      - name: Get version
        id: get_version
        run: |
          echo "VERSION=$(jq -r '.version' packages/controller/package.json)" >> $GITHUB_OUTPUT

      - name: Publish release to npm
        if: ${{ github.event.pull_request.head.ref == 'prepare-release' }}
        run: |
          pnpm release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish prerelease to npm
        if: ${{ github.event.pull_request.head.ref == 'prepare-prerelease' }}
        run: |
          pnpm release:prerelease
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Extract changelog for version
        id: get_changelog
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          if [ -f "CHANGELOG.md" ]; then
            # Extract the changelog section for this version
            # Find the start of this version's section and the start of the next version
            echo "Looking for version: $VERSION"
            START_LINE=$(grep -n "## \[$VERSION\]" CHANGELOG.md | cut -d: -f1 | head -1)
            
            if [ -n "$START_LINE" ]; then
              echo "Found version at line: $START_LINE"
              # Find the next version section or end of file
              NEXT_LINE=$(tail -n +$((START_LINE + 1)) CHANGELOG.md | grep -n "^## \[" | head -1 | cut -d: -f1)
              if [ -n "$NEXT_LINE" ]; then
                END_LINE=$((START_LINE + NEXT_LINE - 1))
                sed -n "${START_LINE},${END_LINE}p" CHANGELOG.md | head -n -1 > version-changelog.md
              else
                # No next version, take to end of file
                tail -n +$START_LINE CHANGELOG.md > version-changelog.md
              fi
              
              # Use a unique delimiter that won't appear in changelog content
              delimiter="END_OF_RELEASE_NOTES_$(date +%s)"
              echo "RELEASE_NOTES<<$delimiter" >> $GITHUB_OUTPUT
              cat version-changelog.md >> $GITHUB_OUTPUT
              echo "$delimiter" >> $GITHUB_OUTPUT
            else
              echo "Version $VERSION not found in CHANGELOG.md"
              echo "RELEASE_NOTES=## Release v$VERSION" >> $GITHUB_OUTPUT
            fi
          else
            echo "CHANGELOG.md not found"
            echo "RELEASE_NOTES=## Release v$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Finalize GitHub Release
        if: success()
        run: |
          gh release edit v${{ steps.get_version.outputs.VERSION }} --notes "${{ steps.get_changelog.outputs.RELEASE_NOTES }}" --draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
